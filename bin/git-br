#!/bin/bash
NAME="`git config user.email | awk '{print $1}'`"
GIT_VERSION="`git --version | awk '{print $3}'`"
MIN_WHO_GIT_VERSION="2.8.0"
UNAME="`uname`"
[ -z "$GIT_ORIGIN" ] && GIT_ORIGIN="origin"

quit() {
    echo -e "$@"
    exit 1
}
version() {
    local v=$1
    echo "${v//./}"
}

##################
# preset options #
##################
porcelainify=0
shortify=0

######################
# get default action #
######################
action="$1"
shift

###############
# get options #
###############
while true ; do
  case $1 in
    --porcelain)
      porcelainify=1
      shift
    ;;
    --short)
     shortify=1
     shift
    ;;
    *) break;;
  esac
done

#####################################
# define format with custom options #
#####################################
if [ $porcelainify -eq 1 ] ; then
  #'%(refname:short) <%(authorname)> (%(committerdate:short))'
  REF='%(refname:short)'
  AUTH='%(authoremail)'
  DATE='(%(committerdate:short))'
else
  REF='%(color:yellow)%(refname:short)%(color:reset)'
  AUTH='%(color:bold blue)%(authoremail)%(color:reset)'
  DATE='%(color:green)(%(committerdate:short))%(color:reset)'
fi
if [ $shortify -eq 1 ] ; then
  DATE=''
fi
FORMAT="$REF $AUTH $DATE"

###########################
# DEFAULT BRANCHES PATHES #
###########################

[ -z "$GIT_RELEASE" ] && GIT_RELEASE="release"
[ -z "$GIT_DEVELOP" ] && GIT_DEVELOP="develop"
[ -z "$GIT_FEATURE" ] && GIT_FEATURE="feature"

#####################################
# define default function by action #
#####################################
case "$action" in
  --relu|--release-unmerged)
    f() {
      $0 --who . remotes/$GIT_ORIGIN/$GIT_DEVELOP refs/remotes/$GIT_ORIGIN/$GIT_RELEASE
    }
  ;;

  --wp|--whop|--who-porcelain)
    f() {
      $0 --who --porcelain $1 $2 $3
    }
  ;;

  -w|--who)
    f() {
      if [ `version $GIT_VERSION` -lt `version $MIN_WHO_GIT_VERSION` ] ; then
        quit "who usage : git version must be at least '$MIN_WHO_GIT_VERSION' - your git is actually '$GIT_VERSION'"
      else
        local w="${1}"
        [ "x*" == "x$w" ] && w=""
        local b="${2:-remotes/$GIT_ORIGIN/$GIT_DEVELOP}"
        local path="${3:-refs/remotes/$GIT_ORIGIN/$GIT_FEATURE}"
        git for-each-ref --no-merge $b --format="$FORMAT" "$path" \
          | sort | egrep "$w";
      fi
    }
  ;;

  #m9 shortified (without $GIT_ORIGIN / without name)
  --m8|--mine-short-porcelain)
    f() {
      $0 --who --porcelain --short "$NAME" "$1" \
        | sed 's_^'$GIT_ORIGIN'/\([^[:blank:]]*\).*$_\1_'
    }
  ;;

  #mine without color
  --m9|--mine-porcelain)
    f() {
      $0 --who --porcelain "$NAME" "$1"
    }
  ;;

  --mine)
    f() {
      $0 --who "$NAME" "$1"
    }
  ;;

  --sw|--switch)
    f() {
      local d=${1-1}
      git checkout `git br --old $d`;
    }
  ;;

  --swh|--history|--switch-history)
    f() {
      local output="$BASH_LIB/bin/odd-color.sh"
      local cat_opt="--number"
      [[ -x "$output" ]] || output="cat"
      [[ "x$UNAME" == "xDarwin" ]] && cat_opt="-n"
      git reflog \
        | awk '$3 ~ /checkout/ {print $1": checkout from "$6}' \
        | head -n40 \
        | cat "$cat_opt" \
        | $output
      }
  ;;

  -o|--old|--old-pwd)
    f() {
      local d=${1:-1}
      git reflog | awk '$3 ~ /checkout/ {print $6}' \
        | head -n$d \
        | tail -n1
    }
  ;;

  -p|--pwd)
    f() {
      git reflog | awk '$3 ~ /checkout/ {print $8}' | head -n1
    }
  ;;


  -a)
    f() {
      local path="refs/remotes/$GIT_ORIGIN/"
      echo "# remotes/$GIT_ORIGIN/* refs"
      git for-each-ref --format="$FORMAT" "$path" | sort;
    }
  ;;

  --rm)
    f() {
        local branch=$1
        git branch -d $1 \
            && git push $GIT_ORIGIN :$1
    }
  ;;
  *)
    f() {
      git branch $action $@
    }
  ;;
esac

##############
# run script #
##############
f $@
